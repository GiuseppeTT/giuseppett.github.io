{
  "hash": "c66a3bdc0cd5c20b1fe0e251eaf262ed",
  "result": {
    "markdown": "---\ntitle: \"Liar's dice\"\nauthor: \"Giuseppe Tinti Tomio\"\ndate: \"2023-11-06\"\ncategories: [analysis, workout]\nimage: \"image.webp\"\nexecute:\n  echo: false\n  warning: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n# Summary\n\n[Liar's Dice](https://en.wikipedia.org/wiki/Liar%27s_dice) is a game based on luck but you can play smart. A good strategy is to start your bet with 25%~33% of the number of dice and call liar if the current bet is 40% of the number of dice or higher.\n\n# Introduction\n\nWhen I was in high school, [Liar's Dice](https://en.wikipedia.org/wiki/Liar%27s_dice) was a really popular game due to the Pirates of the Caribbean movies. As a nerd kid that had recently learned probability, I didn't waste the opportunity to use math to play it better. In this post, I will show how I calculated optimal bets and a few strategies.\n\n# The game\n\nYou can check the game rules at its [Wikipedia page](https://en.wikipedia.org/wiki/Liar%27s_dice), but the quick summary is that each player starts with 5 dice and the objective is to be the last player with dice remaining. Each round starts with all players rolling their dice while hiding the result from the other players. Then, the first player makes a bet about the number of dice that rolled a specific number. The next player can either call liar or make a higher bet. If a player calls liar, all the players reveal their dice and the bet is checked. If the bet is correct, the player that called liar loses a dice. Otherwise, the player that made the bet loses a dice. Importantly, the number 1 counts as a wild card.\n\n# The math\n\nAssuming the dice are fair, the probability of a die rolling a chosen number $d$ between 2 and 6 or a 1 is $1/3$. So, in a round with $n$ dice, the number of dice that rolled $d$ or 1 is a random variable $X$ that follows a binomial distribution\n\n$$\nX \\sim \\text{Binomial}(n, 1/3)\n$$\n\nThen, for a given confidence level $\\alpha$ we can find the highest bet $b$ such that the probability the bet being correct $P(X \\geq b)$ is equal to $\\alpha$ or higher. To do that, we can use the quantile function of the binomial distribution which is implemented in many programming languages like so\n\n```python\ndef calculate_optimal_bet(dice_count, confidence_level):\n    optimal_bet = binomial(\n        quantile=confidence_level,\n        trial_count=dice_count,\n        trial_success_probability=1/3,\n        tail=\"right\",\n    )\n\n    return optimal_bet\n```\n\n# The strategy\n\nThe following plot shows how the optimal bet changes with the number of dice and the confidence level. As expected, more dice allow for higher bets and the higher the confidence, the lower the bet should be.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/optimal bet plot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\nA nice plot can give an intuition of how the optimal bet changes but it is not appropiate for an in game strategy. Instead, there are a few approximations that work surprisingly well (error <= 2):\n\n- 10% of the time, there are 40% of the number of dice or more\n- 50% of the time, there are 33% of the number of dice or more\n- 90% of the time, there are 25% of the number of dice or more\n\nSo, a good strategy is to start your bet with 25% of the number of dice or even 33% of the number of dice to put maximum pressure on the next players. Moreover, you should call liar if the current bet is 40% of the number of dice or higher as it is very unlikely. Importantly, you can take into account the dice that you have to make a more accurate bet but keep in mind that you might reveal information about your hand in doing so.\n\n# Appendix\n\n## Approximation rules\n\nWe can regress the optimal bet on the dice count and the confidence level to find the approximation rules like so\n\n```\noptimal_bet ~ dice_count, for each confidence level\n```\n\n::: {.cell}\n\n:::\n\n\nwhich yields the following coefficients\n\n- 10% confidence level: 40.05%\n- 50% confidence level: 33.38%\n- 90% confidence level: 26.35%\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}